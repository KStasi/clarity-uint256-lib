(define-data-var empty-buff (buff 256) "")
(define-data-var tmp int 0)
(define-data-var result (tuple (x int) (y int)) (tuple (x 0) (y 0)))
(define-data-var tmp-point (tuple (x int) (y int)) (tuple (x 0) (y 0)))

(define-public (ecc-add (p1 (tuple (x int) (y int)))
                        (p2 (tuple (x int) (y int))))
(if (and (is-eq (get x p1) (get x p2)) (is-eq (get y p1) (get y p2)))
    (if (is-eq (get y p1) 0) 
        (ok (tuple (x 0) (y 0)))
        (let 
            ((m (/ (* 3 (* (get x p1) (get x p1))) (* 2 (get y p1))))) 
            (let ((x (- (* m m) (* 2 (get x p1))))) 
                (ok (tuple (x x ) ( y (- (* m (- (get x p1) x)) (get y p1))))))))
    (if (is-eq (get x p1) (get x p2)) 
        (ok (tuple (x 0) (y 0)))
        (let 
            ((m (/ (- (get y p2) (get y p1)) (- (get x p2) (get x p1))))) 
            (let ((x (- (- (* m m) (get x p1)) (get x p2)))) 
                (ok (tuple (x x) (y (- (* m (- (get x p1) x)) (get y p1))))))))
    ))
